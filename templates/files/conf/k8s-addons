#!/bin/bash
set -eu
KUBECTL="/opt/bin/kubectl --kubeconfig=/etc/kubernetes/kubeconfig/addons.yaml"

while ! curl --output /dev/null --silent --head --insecure "https://{{ .APIDomainName }}"; do sleep 1 && echo 'Waiting for master'; done

# Create giantswarm, global and monitoring namespaces
NAMESPACES="giantswarm global monitoring"
for namespace in ${NAMESPACES}
do
  while
      $KUBECTL get namespace ${namespace}
      [ "$?" -ne "0" ]
  do
      while
          $KUBECTL create namespace ${namespace}
          [ "$?" -ne "0" ]
      do
          echo "failed to create namespace ${namespace}, retrying in 5 sec"
          sleep 5s
      done
  done
done

# label namespaces (required for network egress policies)
NAMESPACES="default giantswarm kube-system monitoring global" 
for namespace in ${NAMESPACES}
do
    if ! $KUBECTL get namespaces -l name=${namespace} | grep ${namespace}; then
        while
            $KUBECTL label namespace ${namespace} name=${namespace} --overwrite=true
            [ "$?" -ne "0" ]
        do
            echo "failed to label namespace ${namespace}, retrying in 5 sec"
            sleep 5s
        done
    fi
done

# apply Security bootstrap (RBAC and PSP)
SECURITY_FILES="rbac-roles.yaml
 rbac-bindings.yaml
 psp-policies.yaml
 psp-roles.yaml
 psp-bindings.yaml"
for manifest in $SECURITY_FILES
do
    while
        $KUBECTL apply -f /srv/$manifest
        [ "$?" -ne "0" ]
    do
        echo "failed to apply /srv/$manifest, retrying in 5 sec"
        sleep 5s
    done
done

# apply priority classes
PRIORITY_CLASSES_FILE="priority_classes.yaml"
while
    $KUBECTL apply -f /srv/${PRIORITY_CLASSES_FILE}
    [ "$?" -ne "0" ]
do
    echo "failed to apply /srv/${PRIORITY_CLASSES_FILE}, retrying in 5 sec"
    sleep 5s
done

# create kube-proxy configmap
while
    $KUBECTL create configmap kube-proxy --from-file=kube-proxy.yaml=/srv/kube-proxy-config.yaml -o yaml --dry-run | $KUBECTL apply -n kube-system -f -
    [ "$?" -ne "0" ]
do
    echo "failed to configure kube-proxy from /srv/kube-proxy-confg.yaml, retrying in 5 sec"
    sleep 5s
done

# apply kube-proxy
KUBE_PROXY_MANIFESTS="kube-proxy-sa.yaml kube-proxy-ds.yaml"
for manifest in $KUBE_PROXY_MANIFESTS
do
    while
        $KUBECTL apply -f /srv/$manifest
        [ "$?" -ne "0" ]
    do
        echo "failed to apply /srv/$manifest, retrying in 5 sec"
        sleep 5s
    done
done

# restart ds to apply config from configmap
$KUBECTL delete pods -l k8s-app=kube-proxy -n kube-system

{{ if eq .Provider "aws" -}}
## Apply AWS VPC CNI and Calico for ensuring network policies (only on AWS)
CNI_FILE="aws-cni.yaml calico-policy-only.yaml"
{{ else -}}
## Apply Calico with all its components
CNI_FILE="calico-all.yaml"
{{ end -}}
for manifest in ${CNI_FILE}
do
    while
        $KUBECTL apply -f /srv/$manifest
        [ "$?" -ne "0" ]
    do
        echo "failed to apply /srv/$manifest, retrying in 5 sec"
        sleep 5s
    done
done

echo "Waiting for calico-node to be ready..."
n=0
exitcode=-1
until [ "$n" -ge 20 ] || [ "$exitcode" -eq 0 ]
do
   $KUBECTL -n kube-system -l k8s-app=calico-node wait --for=condition=Ready --timeout=30s pods
   exitcode=$?
   n=$((n+1)) 
   sleep 10
done

# delete calico-kube-controllers
$KUBECTL -n kube-system delete deploy calico-kube-controllers --ignore-not-found=true

# delete legacy nginx daemonset
$KUBECTL -n kube-system delete daemonset nginx-ingress-controller --ignore-not-found=true

# apply k8s addons
MANIFESTS="default-storage-class.yaml
 coredns-all.yaml
 default-backend-dep.yaml
 default-backend-svc.yaml
 ingress-controller-cm.yaml
 ingress-controller-sa.yaml
 ingress-controller-deployment.yaml
 ingress-controller-svc.yaml
 vault-token-reviewer.yaml"
for manifest in $MANIFESTS
do
    while
        $KUBECTL apply -f /srv/$manifest
        [ "$?" -ne "0" ]
    do
        echo "failed to apply /srv/$manifest, retrying in 5 sec"
        sleep 5s
    done
done

echo "Addons successfully installed"
