#!/bin/bash
set -eu
KUBECONFIG=/etc/kubernetes/kubeconfig/addons.yaml
KUBECTL="/opt/bin/kubectl --kubeconfig=$KUBECONFIG"

while ! curl --output /dev/null --silent --head --insecure "https://{{ .APIDomainName }}"; do sleep 1 && echo 'Waiting for master'; done

# Create giantswarm, global and monitoring namespaces
NAMESPACES="giantswarm global monitoring"
for namespace in ${NAMESPACES}
do
  while true
  do
    # If namespace exists there is nothing to do so I exit the inner loop
    $KUBECTL get namespace ${namespace} && break

    # Create namespace and exit the loop if successful
    $KUBECTL create namespace ${namespace} && break

    # Something went wrong, try again
    echo "failed to create namespace ${namespace}, retrying in 5 sec"
    sleep 5s
  done
done

# label namespaces (required for network egress policies)
NAMESPACES="default giantswarm kube-system monitoring global"
for namespace in ${NAMESPACES}
do
    if ! $KUBECTL get namespaces -l name=${namespace} | grep ${namespace}; then
        while
            $KUBECTL label namespace ${namespace} name=${namespace} --overwrite=true
            [ "$?" -ne "0" ]
        do
            echo "failed to label namespace ${namespace}, retrying in 5 sec"
            sleep 5s
        done
    fi
done

# apply Security bootstrap (RBAC and PSP)
SECURITY_FILES="rbac-bindings.yaml"
for manifest in $SECURITY_FILES
do
    while
        $KUBECTL apply -f /srv/$manifest
        [ "$?" -ne "0" ]
    do
        echo "failed to apply /srv/$manifest, retrying in 5 sec"
        sleep 5s
    done
done

# apply k8s addons
MANIFESTS="default-storage-class.yaml
 vault-token-reviewer.yaml"

for manifest in $MANIFESTS
do
    while
        $KUBECTL apply --force -f /srv/$manifest
        [ "$?" -ne "0" ]
    do
        echo "failed to apply /srv/$manifest, retrying in 5 sec"
        sleep 5s
    done
done

# Wait for App CRD to exist.
while ! $KUBECTL get crd apps.application.giantswarm.io ; do sleep 1 && echo 'Waiting for App CRD to exist'; done

# Apply all apps.
$KUBECTL apply -f /srv/apps/ --recursive

{{ if eq .Provider "azure" }}
# Apply CiliumLocalRedirectPolicy for cluster-autoscaler
$KUBECTL apply -f /srv/azure-ad-pod-identity-lrp.yaml
{{ end }}

$KUBECTL apply -f /srv/cilium-egress.yaml

echo "Addons successfully installed"
