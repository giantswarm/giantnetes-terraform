ignition:
  version: "2.2.0"
systemd:
  units:
    - name: update-engine.service
      enabled: false
      mask: true
    - name: locksmithd.service
      enabled: false
      mask: true
    - name: etcd2.service
      enabled: false
      mask: true
    - name: etcd-init.service
      command: stop
      enabled: false
      mask: true
    - name: fleet.service
      enabled: false
      mask: true
    - name: os-hardening.service
      enabled: true
      contents: |
        [Unit]
        Description=Apply os hardening
        [Service]
        Type=oneshot
        ExecStartPre=-/bin/bash -c "gpasswd -d core rkt; gpasswd -d core docker; gpasswd -d core wheel"
        ExecStartPre=/bin/bash -c "until [ -f '/etc/sysctl.d/hardening.conf' ]; do echo Waiting for sysctl file; sleep 1s;done;"
        ExecStart=/usr/sbin/sysctl -p /etc/sysctl.d/hardening.conf
        [Install]
        WantedBy=multi-user.target
    - name: docker.service
      enabled: true
      dropins:
      - name: 10-giantswarm-extra-args.conf
        contents: |
          [Service]
          Environment=DOCKER_OPTS="--log-opt max-size=50m --log-opt max-file=2 --experimental=true --metrics-addr=0.0.0.0:9323"
          Environment=DOCKER_OPT_BIP=--bip={{ .DockerCIDR }}
    - name: node-exporter.service
      enabled: true
      contents: |
        [Unit]
        Description=node-exporter
        Requires=docker.service
        After=docker.service
        [Service]
        Restart=on-failure
        RestartSec=1
        StartLimitInterval=300s
        StartLimitBurst=3
        TimeoutStartSec=0
        Environment="IMAGE=quay.io/giantswarm/node-exporter:v1.0.1"
        Environment="NAME=node-exporter"
        ExecStartPre=/usr/bin/docker pull $IMAGE
        ExecStartPre=-/usr/bin/docker stop -t 10 $NAME
        ExecStartPre=-/usr/bin/docker rm -f $NAME
        # /run/systemd is mounted because go-systemd hardcodes the systemd socket path,
        # so --path.rootfs is not respected. We mount the socket in to the correct path
        # to get around this.
        ExecStart=/usr/bin/docker run --rm  \
            --net=host \
            --pid=host \
            --cap-add SYS_TIME \
            --name $NAME \
            -u=0 \
            -v /:/rootfs:ro,rslave \
            -v /run/systemd:/run/systemd:ro \
            $IMAGE \
                --web.listen-address=:10300 \
                --log.level=debug \
                --path.rootfs=/rootfs \
                --collector.cpu \
                --collector.loadavg \
                --collector.meminfo \
                --collector.systemd \
                --collector.vmstat \
                --no-collector.arp \
                --no-collector.bcache \
                --no-collector.conntrack \
                --no-collector.diskstats \
                --no-collector.edac \
                --no-collector.entropy \
                --no-collector.filefd \
                --no-collector.filesystem \
                --no-collector.hwmon \
                --no-collector.infiniband \
                --no-collector.ipvs \
                --no-collector.mdadm \
                --no-collector.netdev \
                --no-collector.netstat \
                --no-collector.sockstat \
                --no-collector.stat \
                --no-collector.textfile \
                --no-collector.time \
                --no-collector.timex \
                --no-collector.uname \
                --no-collector.wifi \
                --no-collector.zfs \
                --no-collector.xfs
        ExecStop=-/usr/bin/docker stop -t 10 $NAME
        ExecStopPost=-/usr/bin/docker rm -f $NAME
        [Install]
        WantedBy=multi-user.target
    {{ if eq .Provider "aws" -}}
    - name: journald-cloudwatch-logs.service
      enabled: {{ .CloudwatchForwarderEnabled }}
      contents: |
        [Unit]
        Description=journald cloudwatch forwarder
        Requires=docker.service
        After=docker.service

        [Service]
        Environment="NAME=%p.service"
        Environment="IMAGE={{.DockerRegistry}}/giantswarm/journald-cloudwatch-logs:0.1"
        Restart=always
        RestartSec=10
        TimeoutStopSec=10
        ExecStartPre=/usr/bin/mkdir -p /var/lib/cloudwatch-logs
        ExecStartPre=/usr/bin/docker pull $IMAGE
        ExecStart=/usr/bin/docker run --rm --net=host \
                  -v /etc/journald-cloudwatch.conf:/etc/journald-cloudwatch.conf \
                  -v /var/log/journal/:/var/log/journal/ \
                  -v /var/lib/cloudwatch-logs/:/var/lib/cloudwatch-logs/ \
                  --name $NAME $IMAGE /etc/journald-cloudwatch.conf
        ExecStop=-/usr/bin/docker stop -t 10 $NAME

        [Install]
        WantedBy=multi-user.target
    {{ end }}
storage:
  files:

    - path: /boot/coreos/first_boot
      filesystem: root
      mode: 420
      user:
        id: 0
      group:
        id: 0

    - filesystem: root
      path: /etc/ssh/sshd_config
      mode: 384
      user:
        id: 0
      group:
        id: 0
      contents:
        source: "data:text/plain;charset=utf-8;base64,{{ index .Files "conf/sshd_config" }}"
    - filesystem: root
      path: /etc/sysctl.d/hardening.conf
      mode: 384
      user:
        id: 0
      group:
        id: 0
      contents:
        source: "data:text/plain;charset=utf-8;base64,{{ index .Files "conf/hardening.conf" }}"

    - path : /etc/audit/rules.d/99-default.rules
      overwrite: true
      filesystem: root
      mode: 420
      user:
        id: 0
      group:
        id: 0
      contents:
        source: "data:text/plain;charset=utf-8;base64,{{ index .Files "conf/99-default.rules" }}"

    {{ if eq .Provider "aws" }}
    - filesystem: root
      path: /etc/journald-cloudwatch.conf
      mode: 356
      user:
        id: 0
      group:
        id: 0
      contents:
        source: "data:text/plain;charset=utf-8;base64,{{ index .Files "conf/journald-cloudwatch.conf" }}"
    {{ end }}
passwd:
  users:
  - name: giantswarm
    groups:
    - "sudo"
    - "docker"
{{ range .Users }}
  - name: "{{ .name }}"
    groups:
      - "sudo"
      - "docker"
    sshAuthorizedKeys:
      {{- range .sshAuthorizedKeys }}
      - {{ . }}
      {{- end }}
{{- end }}
